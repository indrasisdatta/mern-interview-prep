API - REST, GraphQL (when to use which one)

Accessibility:
 - Semantic code 
 - Images with alt tag 
 - Keyboard navigation support 
 - Mobile AA (as they use thumb)

PR process:
 - Dev branches (accesible to developers)
 - Staging branch (QA) 
 - Master (Prod)
OR Feature flag 

CI/CD: 
 - Jenkins
 - Github actions 

Testing: 
 - ESLint formatter 
 - RTL, JEST 
 - Lighthouse 
 - For E2E test Cypress 

Deployment - Infra: 
 - Static site: S3 deploy 
 - Serverless 
 - Docker EC2 

Monitor & Logging:
 - Sentry 

Styling:
 - SASS 
 - Design system (Reusable)
 - Tailwind/Bootstrap 

==============================================================

SEO needed in some pages - React JS with partial hydration 

Full fledged SSR supports SEO - Next.js 

==============================================================

How to check code quality and PR quality? 

- Automated code quality checks: 
  - ESLint and prettier rules check using husky and lint-staged
  - Unit testing using Jest, RTL. Enforce minimum code coverage threshold. 
  - CI/CD pipeline integration with linting stage, testing stage, code coverage stage 

- Code review checklist:
  - Check functionality, edge cases and error scenarios 
    Proper error handling, over-use of useState (useReducer instead)
  - Code style (Adhere to ESLint, Prettier rules and Follow team-defined coding standards)
  - Performance check efficient DOM update and minimum re-render (use React Profiler)
  - Adhere to WVAG guidelines for Accesibility (use tools like axe-core)
  - For security, XSS prevention - sanitize user inputs 


Code review examples:

1) Approach 1: <input onClick={handleClick} />  
   Approach 2: <input onClick={() => handleClick()} />
Ans: 1 is better as the reference remains the same across re-renders. 
     2 creates a new arrow function each time the component is re-rendered. This can increase memory usage and affect performance. 

2) setCount(count + 1);
Ans: Change to setCount((prevCount) => prevCount + 1);
    State updates are asyncrhonous, so frequent updates can show incorrect results. 

3) Missing key in map -  items.map((item) => <div>{item}</div>);
Ans:  items.map((item) => <div key={item.id}>{item}</div>);

==================


