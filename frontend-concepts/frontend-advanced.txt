Webpack Tree shaking - removing unused code from the prod build. It relies on static structure of ES6 modules.
Tree shaking is not possible for:
- Common JS modules using require and module.exports are dynamic and not statically analyzable by Webpack.
- Dynamic imports import(Data).then(...)
- Importing/exporting entire modules 
  import * as utils from './utils';

Dependency graph: Starts from the entry point and when a module imports another module, a dependency is formed.
Webpack recursively follows this dependencies from the entry point to build the entire graph.
________________________________________________________________________________________________________________

npm v/s yarn v/s pnpm:

Ref: https://www.dhiwise.com/post/pnpm-vs-npm-vs-yarn-which-javascript-package-manager

npm (package.json, package.lock.json)
- hosts the world's largest software registry
- installs packages in a nested manner, creating separate node_modules folder for each package 
  (ensuring each package gets the exact version of its dependencies, thus using more disk space)

yarn (package.json, yarn.lock)
- uses parallel installation to speed up the process
- uses flat dependency tree to reduce package duplication
  (it can lead to version conflicts if multiple packages depend on the same package but different versions)
- caches packages locally, allowing for offline installs
- checks for integrity and has enhanced security measures

pnpm (package.json, pnpm-lock.yaml)
- fast, disk space efficient package manager
- uses symlinks to save disk space and speed up installation
- global store approach where all packages are stored in a single space on the disk
- when package is installed, pnpm links files from the global store to the node_modules folder
- Efficient duplication handling: if multiple projects on the same machine depend on the same package version, pnpm will store the package only once in the global store and link to each project. (Saves disk space and speeds up installation)

For straightforward projects - npm
For faster install and better security - yarn
For optimal performance and disk space efficiency - pnpm

__________________________________________________________________

1. What is PWA?
   - can be installed on device and work offline
   - all static assets (part of build files) are cached so that page loads faster on subsequent visits
   - updates are downloaded in the background

2. What are service workers?
   - Script that runs independently in the browser background
   - commonly used in 'offline first' applications
   - Uses: Background sync, push notifications

3. What are CSR, SSR, CSG?
   Ref: https://res.cloudinary.com/practicaldev/image/fetch/s--bXHuAxci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8onh7r5sxmss9f87k726.png
   - CSR: initially loads empty HTML file, then JS and CSS are loaded. 
           Users see blank screen initially. Also, it's not SEO friendly.
   - SSR: each page initiates request to app server, dynamically renders and serves HTML. Advantages: better performance, SEO friendly.
   - SSG: instead of rendering pages on every request, generate files in build time so that they are server immediately. Useful for static pages eg. blog, portfolio sites.
   - ISR: Incremental Static Regeneration is the next improvement to SSG. 
     Periodically builds and revalidates new pages so that content never gets too much outdated.
     Use static generation on a per page basis, without needing to rebuild the entire site.  

4. How to ensure cross-browser compatibility?
5. Discuss the importance of accessibility in web development
6. Compare and contrast client-side and server-side state management approaches in web development. 
   When would you choose one over the other?
7. How to use automated testing in frontend? End to end testing using Cypress/Selenium?
8. Real time updates - sockets etc.

======================================================================================================

WEB VITALS: standardized metrics set by Google (in 2020) that quantify user experience of a website. 

CORE WEB VITALS: 3 aspects of UX (loading, interactivity, visual stability).
1. Largest contentful paint (LCP) - within 2.5 secs
   => Measures by calculating the time taken to load the largest image/text content since the page first started loading 
2. Interaction to next paint (INP) - within 200ms
   => Checks latency of click, tap, keyboard interactions thoughout the lifespan of user's visit to a page.
3. Cumulative layout shift (CLS) - 0.1 or less	
   => CLS measures how much content elements move around as the page loads. 
      Eg. a poor CLS score would result if a user were reading a page and suddenly a banner loaded and the page jumped down.

First contentful paint: < 1.8s 
First input delay: time takes for a webpage to respond to first user interaction eg. button click (< 100ms)

Next.js improves:
LCP (SSR, image optimization)
SEO 	

React + AI stack: https://www.builder.io/blog/react-ai-stack

Useful hooks: https://usehooks.com/
ShadCN reusable component library: https://21st.dev/

2025 Tools 
  Styling - Tailwind + Shadcn UI 
  Client state management - Zustand 
  Server state management - Tanstack Query
  Table - Tanstack table 
  Forms - React hooks form (validation using Yup or Zod)
  Component development - Storybook
  DB - Supabase (Open source PostgreSQL BE with an option of self-hosting without vendor lock-in)

JS Top trends: https://risingstars.js.org/2024/en
JS Tooling - Vite, Biome, Bun