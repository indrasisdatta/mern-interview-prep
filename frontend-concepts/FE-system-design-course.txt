WEB OPTIMIZATION

	Loading time includes:
	 - TTFB (Time to first byte) 
	 - FCP (First contentful paint)
	 - LCP (Last contentful paint)
	 - TTI (Time to interactive) 
	 
	How to improve TTFB? (Goal: Process server request fast and deliver to client fast)
	 - Use CDN to serve static files
	 - Optimize server side processing (eg. DB queries) 
	 - Optimize DNS lookup times with DNS prefetching 
	 - Enable compression (Gzip, Brotli) to reduce response size 
	 - Use Redis to cache heavy responses 
	 - Use HTTP/2 or HTTP/3 for multiplexing or lower latency 
	 - Reduce HTTP overhead by minimizing headers and cookies 

	How to improve FCP? (Pre-loading or cache for above-the-fold content i.e before scollbar content and lazy load the rest) 
	PRPL Pattern
	 - Preload the late-discovered resources   <link rel="preload" as="image" href="image.jpg" > 
	 - Render the initial route as soon as possible (inline critical JS and set others as async, inline critical CSS used above the fold, server-side rendering but can harm TTI time to interactive)
	 - Pre-cache remaining assets (service workers)
	 - Lazy load other routes and non-critical assets (split your bundle)
	https://web.dev/articles/apply-instant-loading-with-prpl
	 
	How to improve LCP? 
	 - Optimize images using modern formats (avif, webp), compression and lazy loading 
	 - Don't lazy load above the fold images to avoid delay in LCP 
	 - JS optimizations - reduce bundle size (tree shaking, code splitting), delay or async load non-critical JS 
	 
	How to improve TTI? 
	 - Break down long-running JS tasks (Use web workers for heavy computation, split tasks using setTImeout, requestIdleTimeout )
	 - Prioritize loading essential scripts first 
	 - Minimize 3rd party scripts that may be blocking interactivity
	 - Server side rendering (SSR, hydration, static rendering) 
	 - Preload resources based on user behaviour 
	 
	Backend communication - long polling, server-sent events (SSE), web sockets 

	For smooth animation:
	  - Use GPU Acceleration (Use GPU friendly CSS properties like transform and opacity)
	  - Prefer CSS animation 
	  - Use the composion thread/explicit layer creation 
	  
	GPU animations don't trigger re-layouts and re-paints since they are handled at composition layer 

=======================================

Is lazy loading not supported in SSR? 
Full page reloads 

SSR, CSR, SSG, Pre-rendering 

Case Study 1: Social Network
 - Public faced website with millions of DAU 
   (SEO needed, must start quickly, work on low powered devices, UI should be smooth and fast)
 - Content is dynamically rendered 
Solution: SSR with hydration 
Uncanny valley - inspite the page is render and looks normal, it's not interactive. Hydration types: 
 - Full hydration (request the full JS bundle once and hydrate the application)  
 - Partial/selective hydration (hydrate only interactive parts of the aplication)
 - Progressive hydration (individually hydrate nodes over time)
 Island architecture - similar to Partial hydration. Divide the page into independent interactive static components that can be rendered and updated separately. 
https://www.patterns.dev/vanilla/islands-architecture/

Import on interaction - Different ways to load resources: 
- lazy (route based)
- lazy (on interaction) - load when user clicks the UI eg. YouTube video 
- lazy (in viewport) - when user scrolls towards the component 
- Prefetch - load prior to needed but after critical resources are loaded 
- Preload - eagerly with a great level of urgency
https://www.patterns.dev/vanilla/import-on-interaction

Import on visibility - lazy load images that are not directly visible in the viewport but only get loaded when user scrolls down 
Use IntersectionObserver API or use libraries like react-lazyload or react-loadable-visibility 

Prefetch:
const EmojiPicker = import(/* webpackPrefetch: true */ "./EmojiPicker");

Prevent layout shifting and flashes of unstyled text by preloading optional fonts 
<link rel="preload" href="pacifico.woff2" as="font" crossorigin="anonymous">
@font-face {
  font-family: 'Pacifico';
  font-style: normal;
  font-weight: 400;
  src: local('Pacifico Regular'), local('Pacifico-Regular'), url(pacifico.woff2) format('woff2');
  font-display: swap;
}

List virtualization:
 react-virtualized 
 react-window (rewrite of react-virtualized to be smaller, faster)

CRACO - Create react app configuration override (without eject)


 



 
